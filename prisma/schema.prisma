// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
  items         Item[]
  listings      Listing[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  USER
  ADMIN
}

model Item {
  id          String      @id @default(cuid())
  title       String
  description String?     @db.Text
  condition   Condition
  brand       String?
  sku         String?     @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id])
  images      Image[]
  listings    Listing[]
  prices      Price[]
  status      ItemStatus  @default(DRAFT)

  @@index([userId])
  @@index([categoryId])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?   @db.Text
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  items       Item[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([parentId])
}

model Image {
  id          String    @id @default(cuid())
  url         String
  itemId      String
  item        Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)
  isPrimary   Boolean   @default(false)
  order       Int       @default(0)
  metadata    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([itemId])
}

model Listing {
  id          String         @id @default(cuid())
  itemId      String
  item        Item          @relation(fields: [itemId], references: [id])
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  platform    Platform
  status      ListingStatus @default(DRAFT)
  externalId  String?       // ID on the platform (e.g., eBay listing ID)
  price       Decimal       @db.Decimal(10, 2)
  currency    String        @default("AUD")
  quantity    Int           @default(1)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([itemId])
  @@index([userId])
  @@unique([platform, externalId])
}

model Price {
  id          String    @id @default(cuid())
  itemId      String
  item        Item      @relation(fields: [itemId], references: [id])
  amount      Decimal   @db.Decimal(10, 2)
  currency    String    @default("AUD")
  type        PriceType
  createdAt   DateTime  @default(now())

  @@index([itemId])
}

enum Condition {
  NEW
  LIKE_NEW
  VERY_GOOD
  GOOD
  ACCEPTABLE
  FOR_PARTS
}

enum ItemStatus {
  DRAFT
  ACTIVE
  SOLD
  ARCHIVED
}

enum Platform {
  EBAY
  FACEBOOK
  ETSY
  WOOCOMMERCE
}

enum ListingStatus {
  DRAFT
  ACTIVE
  ENDED
  SOLD
}

enum PriceType {
  PURCHASE
  LISTING
  SALE
  SUGGESTED
  COMPETITOR
}
